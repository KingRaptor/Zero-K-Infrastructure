using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 

namespace ZkData
{
    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [WebServiceBinding(Name = "StatsCollectorSoap", Namespace = "http://planet-wars.eu/ModStats")]
    public class StatsCollector: SoapHttpClientProtocol
    {
        SendOrPostCallback SubmitGameExOperationCompleted;
        SendOrPostCallback SubmitGameOperationCompleted;

        /// <remarks/>
        public event SubmitGameCompletedEventHandler SubmitGameCompleted;

        /// <remarks/>
        public event SubmitGameExCompletedEventHandler SubmitGameExCompleted;

        /// <remarks/>
        public StatsCollector()
        {
            Url = "http://planet-wars.eu/ModStats/StatsCollector.asmx";
        }

        /// <remarks/>
        public IAsyncResult BeginSubmitGame(string gameIDString, string mod, string[] data, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SubmitGame", new object[] { gameIDString, mod, data }, callback, asyncState);
        }

        /// <remarks/>
        public IAsyncResult BeginSubmitGameEx(string gameIDString, string mod, string map, string[] data, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SubmitGameEx", new object[] { gameIDString, mod, map, data }, callback, asyncState);
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        /// <remarks/>
        public void EndSubmitGame(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void EndSubmitGameEx(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        [SoapDocumentMethod("http://planet-wars.eu/ModStats/SubmitGame", RequestNamespace = "http://planet-wars.eu/ModStats",
            ResponseNamespace = "http://planet-wars.eu/ModStats", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SubmitGame(string gameIDString, string mod, string[] data)
        {
            Invoke("SubmitGame", new object[] { gameIDString, mod, data });
        }

        /// <remarks/>
        public void SubmitGameAsync(string gameIDString, string mod, string[] data)
        {
            SubmitGameAsync(gameIDString, mod, data, null);
        }

        /// <remarks/>
        public void SubmitGameAsync(string gameIDString, string mod, string[] data, object userState)
        {
            if ((SubmitGameOperationCompleted == null)) SubmitGameOperationCompleted = new SendOrPostCallback(OnSubmitGameOperationCompleted);
            InvokeAsync("SubmitGame", new object[] { gameIDString, mod, data }, SubmitGameOperationCompleted, userState);
        }

        /// <remarks/>
        [SoapDocumentMethod("http://planet-wars.eu/ModStats/SubmitGameEx", RequestNamespace = "http://planet-wars.eu/ModStats",
            ResponseNamespace = "http://planet-wars.eu/ModStats", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SubmitGameEx(string gameIDString, string mod, string map, string[] data)
        {
            Invoke("SubmitGameEx", new object[] { gameIDString, mod, map, data });
        }

        /// <remarks/>
        public void SubmitGameExAsync(string gameIDString, string mod, string map, string[] data)
        {
            SubmitGameExAsync(gameIDString, mod, map, data, null);
        }

        /// <remarks/>
        public void SubmitGameExAsync(string gameIDString, string mod, string map, string[] data, object userState)
        {
            if ((SubmitGameExOperationCompleted == null)) SubmitGameExOperationCompleted = new SendOrPostCallback(OnSubmitGameExOperationCompleted);
            InvokeAsync("SubmitGameEx", new object[] { gameIDString, mod, map, data }, SubmitGameExOperationCompleted, userState);
        }

        void OnSubmitGameExOperationCompleted(object arg)
        {
            if ((SubmitGameExCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs)(arg));
                SubmitGameExCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        void OnSubmitGameOperationCompleted(object arg)
        {
            if ((SubmitGameCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs)(arg));
                SubmitGameCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void SubmitGameCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void SubmitGameExCompletedEventHandler(object sender, AsyncCompletedEventArgs e);
}