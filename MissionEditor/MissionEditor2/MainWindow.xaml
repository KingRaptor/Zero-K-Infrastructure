<!-- ======== 
    DO NOT ADD MORE TEMPLATES HERE
        refer to how ListTemplates.xaml does it instead (look at "Key")
        this also saves us from having to add them to LogicTemplateSelector.cs
    ======== -->
<Window x:Class="MissionEditor2.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:MissionEditor2" xmlns:ad="clr-namespace:AvalonDock;assembly=AvalonDock" xmlns:Actions="clr-namespace:CMissionLib.Actions;assembly=CMissionLib"
        xmlns:CMissionLib="clr-namespace:CMissionLib;assembly=CMissionLib" Title="{Binding Mission.Name, RelativeSource={RelativeSource Self}}" Height="600" Width="1000"
        Name="window" DataContext="{Binding RelativeSource={RelativeSource Self}}" WindowState="Maximized" Loaded="window_Loaded" UseLayoutRounding="True">

    <Window.Resources>
        <local:LogicTemplateSelector x:Key="logicTemplateSelector" />
        <local:MissionItemsConverter x:Key="missionItemsConverter" />

        <Style TargetType="GroupBox">
            <Setter Property="Margin" Value="5" />
            <Setter Property="Padding" Value="5" />
        </Style>


        <!-- ======== ShowConsoleMessage Template ======== -->

        <DataTemplate x:Key="showConsoleMessageTemplate">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <GroupBox Header="Settings">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Label Grid.Row="1">Message</Label>
                        <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding Message, UpdateSourceTrigger=PropertyChanged}" />
                    </Grid>
                </GroupBox>
                <GroupBox Grid.Row="1" Header="Description">
                    This action displays a message the chat area.
                </GroupBox>
            </Grid>
        </DataTemplate>

        <!-- ======== CustomAction2 Template ======== -->

        <DataTemplate x:Key="customAction2Template">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <GroupBox Header="Settings">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Label Grid.Row="0">Code</Label>
                        <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding CodeStr, UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="True" MaxWidth="500" MaxHeight="500" MinLines="3"
                                    HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Visible" MaxLines="20" TextWrapping="Wrap" />
                        <CheckBox Grid.Row="1" IsChecked="{Binding Synced}">Synced</CheckBox>
                    </Grid>
                </GroupBox>
                <GroupBox Grid.Row="1" Header="Description">
                    This action executes the Lua code entered.
                </GroupBox>
            </Grid>
        </DataTemplate>        
        
        <!-- ======== GameStartedCondition Template ======== -->

        <DataTemplate x:Key="gameStartedConditionTemplate">
            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center"> This condition is met when the game starts.</TextBlock>
        </DataTemplate>

        <!-- ======== GamePreloadCondition Template ======== -->

        <DataTemplate x:Key="gamePreloadConditionTemplate">
            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center"> This condition is met before the game starts, after assets are loaded..</TextBlock>
        </DataTemplate>

        <!-- ======== WaitAction Template ======== -->

        <DataTemplate x:Key="waitActionTemplate">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Label Grid.Column="0" Grid.Row="0">Minutes</Label>
                <Label Grid.Column="0" Grid.Row="1">Seconds</Label>
                <Label Grid.Column="0" Grid.Row="2">Frames</Label>
                <TextBox Grid.Column="1" Grid.Row="0" Text="{Binding Minutes, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:#,#.0########}}" />
                <TextBox Grid.Column="1" Grid.Row="1" Text="{Binding Seconds, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:#,#.0########}}" />
                <TextBox Grid.Column="1" Grid.Row="2" Text="{Binding Frames, UpdateSourceTrigger=PropertyChanged}" />
                <TextBlock TextWrapping="WrapWithOverflow" Grid.Row="3" Grid.ColumnSpan="2">
            This action delays the excecution of actions that follow it.
                </TextBlock>
            </Grid>
        </DataTemplate>

        <!-- ======== GameEndedCondition Template ======== -->

        <DataTemplate x:Key="gameEndedConditionTemplate">
            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center"> This condition is met when the game ends.</TextBlock>
        </DataTemplate>

        <!-- ======== Sun Templates ======== -->

        <DataTemplate x:Key="sunriseTemplate">
            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center"> This action will cause the Sun to rise.</TextBlock>
        </DataTemplate>

        <DataTemplate x:Key="sunsetTemplate">
            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center"> This action will cause the Sun to set.</TextBlock>
        </DataTemplate>


        <!-- ======== PlayerDied Template ======== -->

        <DataTemplate x:Key="playerDiedConditionTemplate">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ListBox ItemsSource="{Binding Mission.Players, ElementName=window}" SelectedItem="{Binding Player}" />
                <GroupBox Grid.Row="1" Header="Description">
                    <TextBlock TextWrapping="WrapWithOverflow">
            This condition is met when the selected player dies.
                    </TextBlock>
                </GroupBox>
            </Grid>
        </DataTemplate>

        <!-- ======== Defeat Template ======== -->

        <DataTemplate x:Key="defeatActionTemplate">
            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center">This action causes the game to end in a defeat.</TextBlock>
        </DataTemplate>

        <!-- ======== Victory Template ======== -->

        <DataTemplate x:Key="victoryActionTemplate">
            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center">This action causes the game to end in a victory.</TextBlock>
        </DataTemplate>

        <!-- ======== Allow Transfers Template ======== -->

        <DataTemplate x:Key="allowUnitTransfersTemplate">
            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center">
                This action allows players to transfer units to other teams.
                <LineBreak />
                This has no effect on the TransferUnits action.
            </TextBlock>
        </DataTemplate>

        <!-- ======== GuiMessage Template ======== -->

        <DataTemplate x:Key="guiMessageTemplate">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <GroupBox Header="Settings">
                    <StackPanel>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Label>Message</Label>
                            <TextBox Grid.Column="1" Text="{Binding Message, UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="True" MaxWidth="500" MaxHeight="500" MinLines="3"
                                    HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Visible" MaxLines="20" TextWrapping="Wrap" />
                            <Label Grid.Row="1">Pause Game</Label>
                            <CheckBox Grid.Row="1" Grid.Column="1" IsChecked="{Binding Pause}" VerticalAlignment="Center" />
                        </Grid>
                        <DockPanel>
                            <Label DockPanel.Dock="Left">Message Box Width:</Label>
                            <Label DockPanel.Dock="Left" Content="{Binding Width, Mode=TwoWay}" />
                            <Slider Minimum="0" Maximum="1000" Value="{Binding Width, Mode=TwoWay}" />
                        </DockPanel>
                        <DockPanel>
                            <Label DockPanel.Dock="Left">Message Box Height:</Label>
                            <Label DockPanel.Dock="Left" Content="{Binding Height, Mode=TwoWay}" />
                            <Slider Minimum="0" Maximum="1000" Value="{Binding Height, Mode=TwoWay}" />
                        </DockPanel>
                        <DockPanel>
                            <Label DockPanel.Dock="Left">Font Size:</Label>
                            <Label DockPanel.Dock="Left" Content="{Binding FontSize, Mode=TwoWay}" />
                            <Slider Minimum="8" Maximum="72" Value="{Binding FontSize, Mode=TwoWay}" />
                        </DockPanel>                        
                        <Label>Image:</Label>
                        <Viewbox Width="150" Height="150">
                            <Grid>
                                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" TextBlock.FontSize="12">?</TextBlock>
                                <!--if the image is found, it will hide the question mark-->
                                <Image Source="{Binding ImagePath}" />
                            </Grid>
                        </Viewbox>
                        <TextBox Text="{Binding ImagePath, UpdateSourceTrigger=PropertyChanged}"></TextBox>
                        <Button Loaded="GuiMessageButtonLoaded" Tag="{Binding}">Select</Button>
                    </StackPanel>
                </GroupBox>
                <GroupBox Grid.Row="1" Header="Description">
                    <TextBlock TextWrapping="WrapWithOverflow">
                        This action displays a box with the message and/or the image. You can define any of the two, or both.
                    </TextBlock>
                </GroupBox>
            </Grid>
        </DataTemplate>

        <!-- ======== GuiMessagePersistent Template ======== -->

        <DataTemplate x:Key="guiMessagePersistentTemplate">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <GroupBox Header="Settings">
                    <StackPanel>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Label>Message</Label>
                            <TextBox Grid.Column="1" Text="{Binding Message, UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="True" MaxWidth="500" MaxHeight="500" MinLines="3"
                                    HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Visible" MaxLines="20" TextWrapping="Wrap" />
                        </Grid>
                        <DockPanel>
                            <Label DockPanel.Dock="Left">Message Box Width:</Label>
                            <Label DockPanel.Dock="Left" Content="{Binding Width, Mode=TwoWay}" />
                            <Slider Minimum="0" Maximum="1000" Value="{Binding Width, Mode=TwoWay}" />
                        </DockPanel>
                        <DockPanel>
                            <Label DockPanel.Dock="Left">Message Box Height:</Label>
                            <Label DockPanel.Dock="Left" Content="{Binding Height, Mode=TwoWay}" />
                            <Slider Minimum="0" Maximum="1000" Value="{Binding Height, Mode=TwoWay}" />
                        </DockPanel>
                        <DockPanel>
                            <Label DockPanel.Dock="Left">Font Size:</Label>
                            <Label DockPanel.Dock="Left" Content="{Binding FontSize, Mode=TwoWay}" />
                            <Slider Minimum="8" Maximum="72" Value="{Binding FontSize, Mode=TwoWay}" />
                        </DockPanel>
                        <Label>Image:</Label>
                        <Viewbox Width="150" Height="150">
                            <Grid>
                                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" TextBlock.FontSize="12">?</TextBlock>
                                <!--if the image is found, it will hide the question mark-->
                                <Image Source="{Binding ImagePath}" />
                            </Grid>
                        </Viewbox>
                        <TextBox Text="{Binding ImagePath, UpdateSourceTrigger=PropertyChanged}"></TextBox>
                        <Button Loaded="GuiMessagePersistentButtonLoaded" Tag="{Binding}">Select</Button>
                    </StackPanel>
                </GroupBox>
                <GroupBox Grid.Row="1" Header="Description">
                    <TextBlock TextWrapping="WrapWithOverflow">
                        This action displays a box with the message and/or the image. You can define any of the two, or both.
                    </TextBlock>
                </GroupBox>
            </Grid>
        </DataTemplate>

        <!-- ======== HideGuiMessagePersistent Template ======== -->

        <DataTemplate x:Key="hideGuiMessagePersistentTemplate">
            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center">This action hides the current Persistent GUI Message, if any.</TextBlock>
        </DataTemplate>

        <!-- ======== ConvoMessage Template ======== -->

        <DataTemplate x:Key="convoMessageTemplate">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <GroupBox Header="Settings">
                    <StackPanel>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Label>Message</Label>
                            <TextBox Grid.Column="1" Text="{Binding Message, UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="True" MaxWidth="500" MaxHeight="500" MinLines="3"
                                    HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Visible" MaxLines="20" TextWrapping="Wrap" />
                        </Grid>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="60" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Label>Length (frames)</Label>
                            <TextBox Grid.Column="1" Text="{Binding Time, UpdateSourceTrigger=PropertyChanged}" />
                        </Grid>
                        <DockPanel>
                            <Label DockPanel.Dock="Left">Font Size:</Label>
                            <Label DockPanel.Dock="Left" Content="{Binding FontSize, Mode=TwoWay}" />
                            <Slider Minimum="8" Maximum="72" Value="{Binding FontSize, Mode=TwoWay}" />
                        </DockPanel>
                        <Label>Image:</Label>
                        <Viewbox Width="150" Height="150">
                            <Grid>
                                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" TextBlock.FontSize="12">?</TextBlock>
                                <!--if the image is found, it will hide the question mark-->
                                <Image Source="{Binding ImagePath}" />
                            </Grid>
                        </Viewbox>
                        <TextBox Text="{Binding ImagePath, UpdateSourceTrigger=PropertyChanged}"></TextBox>
                        <Button Loaded="ConvoMessageButtonLoadedImg" Tag="{Binding}">Select</Button>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Label>Sound:</Label>
                            <TextBox Grid.Column="1" Grid.Row="0" Text="{Binding SoundPath, UpdateSourceTrigger=PropertyChanged}"></TextBox>
                            <Button Grid.Column="0" Grid.Row="1" Loaded="ConvoMessageButtonLoadedSound" Tag="{Binding}">Select</Button>
                        </Grid>
                    </StackPanel>
                </GroupBox>
                <GroupBox Grid.Row="1" Header="Description">
                    <TextBlock TextWrapping="Wrap">
                        This action displays a conversation message box. It goes away on its own after the specified time, can have a sound, and remains visible during cutscenes. If a current convo message is already being displayed, the new one will be added to a queue.
                    </TextBlock>
                </GroupBox>
            </Grid>
        </DataTemplate>
        
        <!-- ======== ClearConvoMessageQueue Template ======== -->

        <DataTemplate x:Key="clearConvoMessageQueueTemplate">
            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center">This action hides the current Convo Message (if any) and clears the queue.</TextBlock>
        </DataTemplate>
        

        <!-- ======== AddObjective Template ======== -->

        <DataTemplate x:Key="addObjectiveTemplate">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <GroupBox Header="Settings">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Label>ID</Label>
                        <TextBox Grid.Column="1" Text="{Binding ID, UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="False" MaxWidth="500" MaxLines="1"/>
                        <Label Grid.Row="1">Title</Label>
                        <TextBox Grid.Column="1" Grid.Row="1" Text="{Binding Title, UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="False" MaxWidth="500" MaxLines="1"/>
                        <Label Grid.Row="2">Description</Label>
                        <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding Description, UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="True" MaxWidth="500" MaxHeight="500" MinLines="3"
                                HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Visible" MaxLines="10" TextWrapping="Wrap" />
                    </Grid>
                </GroupBox>
                <GroupBox Grid.Row="1" Header="Description">
                    <TextBlock TextWrapping="Wrap">
                        This action creates a new objective with the specified ID. You can define the objective title and description.
                    </TextBlock>
                </GroupBox>
            </Grid>
        </DataTemplate>

        <!-- ======== ModifyObjective Template ======== -->

        <DataTemplate x:Key="modifyObjectiveTemplate">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <GroupBox Header="Settings">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Label>ID</Label>
                        <ComboBox Grid.Column="1" ItemsSource="{Binding Mission.Objectives, ElementName=window}" SelectedItem="{Binding ID}" />
                        <Label Grid.Row="1">Title</Label>
                        <TextBox Grid.Column="1" Grid.Row="1" Text="{Binding Title, UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="False" MaxWidth="500" MaxLines="1"/>
                        <Label Grid.Row="2">Description</Label>
                        <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding Description, UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="True" MaxWidth="500" MaxHeight="500" MinLines="3"
                                HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Visible" MaxLines="10" TextWrapping="Wrap" />
                        <Label Grid.Row="3">Status</Label>
                        <ComboBox Grid.Row="3" Grid.Column="1" ItemsSource="{x:Static Actions:ModifyObjectiveAction.Statuses}" SelectedItem="{Binding Status}" />
                    </Grid>
                </GroupBox>
                <GroupBox Grid.Row="1" Header="Description">
                    <TextBlock TextWrapping="Wrap">
                        This action modifies the objective with the specified ID. You can define the objective title and description.
                    </TextBlock>
                </GroupBox>
            </Grid>
        </DataTemplate>

        <!-- ======== Send Score Template ======== -->

        <DataTemplate x:Key="sendScoreTemplate">
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
        This action sends the player score to the central score server.
            </TextBlock>
        </DataTemplate>

        <!-- ======== Dummy Templates ======== -->

        <DataTemplate x:Key="dummyTemplate">
            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center">Select a condition or an action to start.</TextBlock>
        </DataTemplate>

        <!-- ======== End of  Resources ======== -->

    </Window.Resources>

    <DockPanel>
        <Menu Name="MainMenu" DockPanel.Dock="Top" x:FieldModifier="public" />
        <ad:DockingManager>
            <ad:ResizingPanel>
                <ad:DockablePane ad:ResizingPanel.ResizeWidth="200">
                    <ad:DockableContent IsCloseable="False" Title="Triggers" DockableStyle="Dockable">
                        <TreeView x:Name="logicGrid" DockPanel.Dock="Left" ItemsSource="{Binding Mission.Items}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" AllowDrop="True"  Drop="logicGrid_Drop" PreviewMouseLeftButtonDown="logicGrid_PreviewMouseLeftButtonDown" PreviewMouseMove="logicGrid_PreviewMouseMove" MouseUp="logicGrid_MouseUp">
                            <TreeView.Style>
                                <Style>
                                    <Style.Resources>
                                        <!-- Background of selected item when focused -->
                                        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Orange"/>
                                        <!-- Background of selected item when not focused -->
                                        <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
                                    </Style.Resources>
                                </Style>
                            </TreeView.Style>
                            <TreeView.Resources>
                                <Style TargetType="TreeViewItem">
                                    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay, FallbackValue=true}" />
                                </Style>
                                <local:TriggerConverter x:Key="triggerConverter" />
                                <HierarchicalDataTemplate ItemsSource="{Binding Converter={StaticResource triggerConverter}}" DataType="{x:Type CMissionLib:Trigger}">
                                    <Border Background="SteelBlue" Margin="3,5,-5,3" CornerRadius="5" Padding="3,3,7,3" Loaded="trigger_Loaded" Width="1000">
                                        <TextBlock Text="{Binding Name}" FontWeight="Bold" Foreground="White" VerticalAlignment="Center" />
                                    </Border>
                                </HierarchicalDataTemplate>
                                <HierarchicalDataTemplate DataType="{x:Type local:ActionsFolder}" ItemsSource="{Binding Path=Items}">
                                    <Border Background="LightBlue" Margin="3,5,-5,3" Padding="3,1,6,1" CornerRadius="5" Loaded="actionsFolder_Loaded" Width="1000">
                                        <TextBlock Text="{Binding Name}" Foreground="Black" FontWeight="Bold" VerticalAlignment="Center" />
                                    </Border>
                                </HierarchicalDataTemplate>
                                <HierarchicalDataTemplate DataType="{x:Type local:ConditionsFolder}" ItemsSource="{Binding Path=Items}">
                                    <Border Background="LightBlue" Margin="3,5,-5,3" Padding="3,1,6,1" CornerRadius="5" Loaded="conditionsFolder_Loaded" Width="1000">
                                        <TextBlock Text="{Binding Name}" Foreground="Black" FontWeight="Bold" VerticalAlignment="Center" />
                                    </Border>
                                </HierarchicalDataTemplate>
                                <DataTemplate DataType="{x:Type CMissionLib:Condition}">
                                    <Border Background="LightGreen" Margin="1,0,-5,1" CornerRadius="5" Padding="3,1,6,1" Loaded="condition_Loaded" Width="1000">
                                        <TextBlock Text="{Binding Name}" Foreground="Black" VerticalAlignment="Center" />
                                    </Border>
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type CMissionLib:Action}">
                                    <Border Background="Pink" Margin="1,0,-5,1" CornerRadius="5" Padding="3,1,6,1" Loaded="action_Loaded" Width="1000">
                                        <TextBlock Text="{Binding Name}" Foreground="Black" VerticalAlignment="Center" />
                                    </Border>
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type CMissionLib:Region}">
                                    <Border Background="Green" Margin="3,5,-5,3" Padding="3,1,6,1" CornerRadius="5" Loaded="region_Loaded" Width="1000">
                                        <TextBlock Text="{Binding Name}" Foreground="White" FontWeight="Bold" VerticalAlignment="Center" />
                                    </Border>
                                </DataTemplate>
                            </TreeView.Resources>
                        </TreeView>
                    </ad:DockableContent>
                </ad:DockablePane>
                <ad:DocumentPane>
                    <ad:DocumentContent IsCloseable="False" Title="{Binding SelectedItem.Name, ElementName=logicGrid}">
                        <Grid Background="White">
                            <ContentControl Name="map" Content="{Binding ElementName=logicGrid, Path=SelectedItem, IsAsync=true}"
                                    ContentTemplateSelector="{StaticResource logicTemplateSelector}" Background="White" />
                        </Grid>
                    </ad:DocumentContent>
                </ad:DocumentPane>
            </ad:ResizingPanel>
        </ad:DockingManager>

    </DockPanel>
</Window>
