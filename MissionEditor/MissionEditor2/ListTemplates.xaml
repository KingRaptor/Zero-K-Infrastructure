<!-- ======== this file defines GUI templates in the main window for trigger/condition/action parameters
    and maybe some other stuff as well ======== -->
<UserControl x:Class="MissionEditor2.ListTemplates" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:ad="clr-namespace:AvalonDock;assembly=AvalonDock"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:MissionEditor2" xmlns:ml="clr-namespace:CMissionLib;assembly=CMissionLib"
        xmlns:Actions="clr-namespace:CMissionLib.Actions;assembly=CMissionLib" xmlns:Conditions="clr-namespace:CMissionLib.Conditions;assembly=CMissionLib">
    <UserControl.Resources>

        <Grid x:Key="triggersList" HorizontalAlignment="Center" VerticalAlignment="Center">
            <ListBox ItemsSource="{Binding Mission.Triggers, ElementName=window}" SelectionMode="Multiple" Loaded="Triggers_ListLoaded" />
        </Grid>

        <DataTemplate x:Key="PlayerJoinedCondition">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ListBox ItemsSource="{Binding Mission.Players, ElementName=window}" SelectedItem="{Binding Player}" />
                <GroupBox Grid.Row="1" Header="Description">
                    <TextBlock TextWrapping="WrapWithOverflow">
            This condition is met if the selected player is connected when the game starts.
                    </TextBlock>
                </GroupBox>
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="TimeCondition">
            <local:TimeConditionControl />
        </DataTemplate>

        <DataTemplate x:Key="TimerCondition">
            <local:TimerConditionControl />
        </DataTemplate>

        <DataTemplate x:Key="SoundAction">
            <local:SoundActionControl />
        </DataTemplate>

        <DataTemplate x:Key="MusicAction">
            <local:MusicActionControl />
        </DataTemplate>

        <DataTemplate x:Key="MusicLoopAction">
            <local:MusicLoopActionControl />
        </DataTemplate>

        <DataTemplate x:Key="StopMusicAction">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <CheckBox IsChecked="{Binding NoContinue}">Prevent music player from starting next track</CheckBox>
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:Key="UnitBuiltOnGhostCondition">
            <local:UnitBuiltOnGhostConditionControl />
        </DataTemplate>
        
        <DataTemplate x:Key="Region">
            <local:RegionControl />
        </DataTemplate>


        <DataTemplate x:Key="EnableTriggersAction">
            <ContentControl Content="{StaticResource triggersList}" />
        </DataTemplate>

        <DataTemplate x:Key="DisableTriggersAction">
            <ContentControl Content="{StaticResource triggersList}" />
        </DataTemplate>

        <DataTemplate x:Key="ExecuteTriggersAction">
            <ContentControl Content="{StaticResource triggersList}" />
        </DataTemplate>

        <DataTemplate x:Key="ExecuteRandomTriggerAction">
            <ContentControl Content="{StaticResource triggersList}" />
        </DataTemplate>

        <DataTemplate x:Key="PauseAction">
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
        Pauses the game.
            </TextBlock>
        </DataTemplate>

        <DataTemplate x:Key="UnitEnteredLOSCondition">
            <local:UnitEnteredLOSConditionControl />
        </DataTemplate>
        
        <DataTemplate x:Key="UnitSelectedCondition">
            <local:UnitSelectedConditionControl />
        </DataTemplate>

        <DataTemplate x:Key="UnitIsVisibleCondition">
            <local:UnitIsVisibleConditionControl />
        </DataTemplate>

        <DataTemplate x:Key="GiveOrdersAction">
            <local:GiveOrdersPane />
        </DataTemplate>

        <DataTemplate x:Key="GiveTargetedOrdersAction">
            <local:GiveTargetedOrdersActionControl />
        </DataTemplate>
        
        <DataTemplate x:Key="CreateUnitsAction">
            <local:CreateUnitsPane />
        </DataTemplate>

        <DockPanel x:Key="unitConditionPane">
            <ListBox ItemsSource="{Binding Mission.Players, ElementName=window}" Loaded="PlayersList_Loaded" SelectionMode="Multiple" />
            <local:UnitDefsGrid Tag="{Binding Mission.Mod.UnitDefs, ElementName=window}" Loaded="UnitDefGrid_Loaded" />
        </DockPanel>

        <DataTemplate x:Key="UnitCreatedCondition">
            <ContentControl Content="{StaticResource unitConditionPane}" />
        </DataTemplate>

        <DataTemplate x:Key="UnitFinishedCondition">
            <ContentControl Content="{StaticResource unitConditionPane}" />
        </DataTemplate>

        <DataTemplate x:Key="UnitFinishedInFactoryCondition">
            <ContentControl Content="{StaticResource unitConditionPane}" />
        </DataTemplate>

        <DataTemplate x:Key="UnitDestroyedCondition">
            <local:UnitDestroyedConditionControl />
        </DataTemplate>

        <DataTemplate x:Key="LockUnitsAction">
            <ContentControl Content="{StaticResource unitConditionPane}" />
        </DataTemplate>

        <DataTemplate x:Key="GiveFactoryOrdersAction">
            <local:GiveFactoryOrdersPane />
        </DataTemplate>

        <DataTemplate x:Key="UnlockUnitsAction">
            <ContentControl Content="{StaticResource unitConditionPane}" />
        </DataTemplate>

        <DataTemplate x:Key="CustomCondition">
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
        For Advanced users.
        <LineBreak />
        Edit MissionBase/LuaRules/Gadgets/mission_runner.lua and call CustomConditionMet(conditionName) with this condition's name to activate this trigger.
            </TextBlock>
        </DataTemplate>

        <DataTemplate x:Key="DisplayCountersAction">
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
        Displays counters in the console. For debugging.
            </TextBlock>
        </DataTemplate>

        <DataTemplate x:Key="CustomAction">
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
        For Advanced users.
        <LineBreak />
        Edit MissionBase/LuaRules/Gadgets/mission_runner.lua, and replace "-- fill in your custom actions" with your code.
            </TextBlock>
        </DataTemplate>

        <DataTemplate x:Key="Trigger">
            <local:TriggerSettingsControl />
        </DataTemplate>

        <DataTemplate x:Key="DestroyUnitsAction">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <Label>Group of units to destroy:</Label>
                <ComboBox ItemsSource="{Binding Mission.AllGroups, ElementName=window}" SelectedItem="{Binding Group}" />
                <CheckBox IsChecked="{Binding Explode}">Explode</CheckBox>
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:Key="TransferUnitsAction">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Orientation="Horizontal">
                <Label>Transfer group</Label>
                <ComboBox ItemsSource="{Binding Mission.AllGroups, ElementName=window}" SelectedItem="{Binding Group}" />
                <Label>to</Label>
                <ComboBox ItemsSource="{Binding Mission.Players, ElementName=window}" SelectedItem="{Binding Player}" />
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:Key="ModifyResourcesAction">
            <local:ModifyResourcesActionControl />
        </DataTemplate>

        <DataTemplate x:Key="ModifyUnitHealthAction">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <StackPanel Orientation="Horizontal">
                    <Label>Deal</Label>
                    <TextBox Text="{Binding Damage, UpdateSourceTrigger=PropertyChanged}" />
                    <Label>damage to</Label>
                    <ComboBox ItemsSource="{Binding Mission.AllGroups, ElementName=window}" SelectedItem="{Binding Group}" />
                </StackPanel>
                <TextBlock>Note: negative amounts are accepted.</TextBlock>
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:Key="MakeUnitsAlwaysVisibleAction">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <Label>Group:</Label>
                <ComboBox ItemsSource="{Binding Mission.AllGroups, ElementName=window}" SelectedItem="{Binding Group}" />
                <CheckBox IsChecked="{Binding Value}">Always Visible</CheckBox>
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:Key="MakeUnitsNeutralAction">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <Label>Group:</Label>
                <ComboBox ItemsSource="{Binding Mission.AllGroups, ElementName=window}" SelectedItem="{Binding Group}" />
                <CheckBox IsChecked="{Binding Value}">Neutral</CheckBox>
            </StackPanel>
        </DataTemplate>       
        
        <DataTemplate x:Key="ModifyCounterAction">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <Button Click="AddCounterButton_Click">Add Counter</Button>
                <Button Click="RemoveCounterButton_Click">Remove Counter</Button>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <Label Grid.Row="0">Counter</Label>
                    <Label Grid.Row="1">Action</Label>
                    <Label Grid.Row="2">Value</Label>
                    <ComboBox Grid.Row="0" Grid.Column="1" ItemsSource="{Binding Mission.Counters, ElementName=window}" SelectedItem="{Binding Counter}" />
                    <ComboBox Grid.Row="1" Grid.Column="1" ItemsSource="{x:Static Actions:ModifyCounterAction.Actions}" SelectedItem="{Binding Action}" />
                    <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding Value, UpdateSourceTrigger=PropertyChanged}" />
                </Grid>
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:Key="UnitDamagedCondition">
            <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Label Grid.Row="0">Attacker group</Label>
                <Label Grid.Row="1">Any attacker?</Label>
                <Label Grid.Row="2">Victim group</Label>
                <Label Grid.Row="3">Any victim?</Label>
                <Label Grid.Row="4">Unit health under:</Label>
                <ComboBox Grid.Row="0" Grid.Column="1" ItemsSource="{Binding Mission.AllGroups, ElementName=window}" SelectedItem="{Binding AttackerGroup}" />
                <CheckBox Grid.Row="1" Grid.Column="1" VerticalAlignment="Center" IsChecked="{Binding AnyAttacker}" />
                <ComboBox Grid.Row="2" Grid.Column="1" ItemsSource="{Binding Mission.AllGroups, ElementName=window}" SelectedItem="{Binding VictimGroup}" />
                <CheckBox Grid.Row="3" Grid.Column="1" VerticalAlignment="Center" IsChecked="{Binding AnyVictim}" />
                <TextBox Grid.Row="4" Grid.Column="1" Text="{Binding Value, UpdateSourceTrigger=PropertyChanged}" />
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="CounterModifiedCondition">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Orientation="Horizontal">
                <ComboBox ItemsSource="{Binding Mission.Counters, ElementName=window}" SelectedItem="{Binding Counter}" />
                <ComboBox ItemsSource="{x:Static Conditions:CounterModifiedCondition.Conditions}" SelectedItem="{Binding Condition}" />
                <TextBox Text="{Binding Value, UpdateSourceTrigger=PropertyChanged}" />
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:Key="StartCountdownAction">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Label Grid.Row="0">Countdown Description</Label>
                <Label Grid.Row="1">Show in GUI</Label>
                <Label Grid.Row="2">Minutes</Label>
                <Label Grid.Row="3">Seconds</Label>
                <Label Grid.Row="4">Frames</Label>
                <TextBox Grid.Column="1" Grid.Row="0" Text="{Binding Countdown, UpdateSourceTrigger=PropertyChanged}" />
                <CheckBox Grid.Column="1" Grid.Row="1" VerticalAlignment="Center" IsChecked="{Binding Display}" />
                <TextBox Grid.Column="1" Grid.Row="2" Text="{Binding Minutes, UpdateSourceTrigger=PropertyChanged}" />
                <TextBox Grid.Column="1" Grid.Row="3" Text="{Binding Seconds, UpdateSourceTrigger=PropertyChanged}" />
                <TextBox Grid.Column="1" Grid.Row="4" Text="{Binding Frames, UpdateSourceTrigger=PropertyChanged}" />
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="ModifyCountdownAction">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Label Grid.Row="0">Coundown</Label>
                <Label Grid.Row="1">Action</Label>
                <Label Grid.Row="2">Minutes</Label>
                <Label Grid.Row="3">Seconds</Label>
                <Label Grid.Row="4">Frames</Label>
                <ComboBox Grid.Column="1" Grid.Row="0" ItemsSource="{Binding Mission.Countdowns, ElementName=window}" SelectedItem="{Binding Countdown}" />
                <ComboBox Grid.Column="1" Grid.Row="1" ItemsSource="{x:Static Actions:ModifyCountdownAction.Modes}" SelectedItem="{Binding Mode}" />
                <TextBox Grid.Column="1" Grid.Row="2" Text="{Binding Minutes, UpdateSourceTrigger=PropertyChanged}" />
                <TextBox Grid.Column="1" Grid.Row="3" Text="{Binding Seconds, UpdateSourceTrigger=PropertyChanged}" />
                <TextBox Grid.Column="1" Grid.Row="4" Text="{Binding Frames, UpdateSourceTrigger=PropertyChanged}" />
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="ModifyScoreAction">
            <local:ModifyScoreControl />
        </DataTemplate>

        <DataTemplate x:Key="CancelCountdownAction">
            <DockPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                <Label>Countdown</Label>
                <ComboBox ItemsSource="{Binding Mission.Countdowns, ElementName=window}" SelectedItem="{Binding Countdown}" />
            </DockPanel>
        </DataTemplate>

        <DataTemplate x:Key="CountdownTickCondition">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Label Grid.Row="0">Coundown</Label>
                <Label Grid.Row="1">Frequency:</Label>
                <Label Grid.Row="2">Minutes</Label>
                <Label Grid.Row="3">Seconds</Label>
                <Label Grid.Row="4">Frames</Label>
                <ComboBox Grid.Column="1" Grid.Row="0" ItemsSource="{Binding Mission.Countdowns, ElementName=window}" SelectedItem="{Binding Countdown}" />
                <TextBox Grid.Column="1" Grid.Row="2" Text="{Binding Minutes, UpdateSourceTrigger=PropertyChanged}" />
                <TextBox Grid.Column="1" Grid.Row="3" Text="{Binding Seconds, UpdateSourceTrigger=PropertyChanged}" />
                <TextBox Grid.Column="1" Grid.Row="4" Text="{Binding Frames, UpdateSourceTrigger=PropertyChanged}" />
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="TimeLeftInCountdownCondition">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Label Grid.Row="0">Coundown</Label>
                <Label Grid.Row="1">Time Left:</Label>
                <Label Grid.Row="2">Minutes</Label>
                <Label Grid.Row="3">Seconds</Label>
                <Label Grid.Row="4">Frames</Label>
                <ComboBox Grid.Column="1" Grid.Row="0" ItemsSource="{Binding Mission.Countdowns, ElementName=window}" SelectedItem="{Binding Countdown}" />
                <TextBox Grid.Column="1" Grid.Row="2" Text="{Binding Minutes, UpdateSourceTrigger=PropertyChanged}" />
                <TextBox Grid.Column="1" Grid.Row="3" Text="{Binding Seconds, UpdateSourceTrigger=PropertyChanged}" />
                <TextBox Grid.Column="1" Grid.Row="4" Text="{Binding Frames, UpdateSourceTrigger=PropertyChanged}" />
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="CountdownEndedCondition">
            <DockPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                <Label>Countdown</Label>
                <ComboBox ItemsSource="{Binding Mission.Countdowns, ElementName=window}" SelectedItem="{Binding Countdown}" />
            </DockPanel>
        </DataTemplate>

        <!-- ======== Set Map Marker ======== -->

        <local:ZoomConverter x:Key="log10Converter" />

        <Canvas x:Key="markerPointCanvas" MinHeight="{Binding Mission.Map.Texture.Height, ElementName=window}" MinWidth="{Binding Mission.Map.Texture.Width, ElementName=window}"
                Loaded="MarkerPointCanvas_Loaded">
            <Canvas.LayoutTransform>
                <ScaleTransform ScaleX="{Binding Value, ElementName=zoomSlider, Converter={StaticResource log10Converter}}"
                        ScaleY="{Binding Value, ElementName=zoomSlider, Converter={StaticResource log10Converter}}" />
            </Canvas.LayoutTransform>
            <Canvas.Background>
                <ImageBrush AlignmentX="Left" AlignmentY="Top" Stretch="None" ImageSource="{Binding Mission.Map.Texture, ElementName=window}" />
            </Canvas.Background>
        </Canvas>

        <DataTemplate x:Key="MarkerPointAction">
            <DockPanel>
                <ToolBarTray DockPanel.Dock="Top">
                    <ToolBar>
                        <Label>Message:</Label>
                        <TextBox Text="{Binding Text, UpdateSourceTrigger=PropertyChanged}" MinWidth="100" />
                        <CheckBox IsChecked="{Binding CenterCamera}">Center Camera</CheckBox>
                    </ToolBar>
                </ToolBarTray>
                <DockPanel DockPanel.Dock="Bottom" Background="White">
                    <Label DockPanel.Dock="Left">Map Zoom</Label>
                    <Slider Name="zoomSlider" Minimum="0.01" Maximum="2" Value="1" />
                </DockPanel>
                <ScrollViewer HorizontalScrollBarVisibility="Auto">
                    <ContentControl Content="{StaticResource markerPointCanvas}" />
                </ScrollViewer>
            </DockPanel>
        </DataTemplate>

        <!-- ======== Set Camera Map Target ======== -->

        <DataTemplate x:Key="SetCameraPointTargetAction">
            <DockPanel>
                <DockPanel DockPanel.Dock="Bottom" Background="White">
                    <Label DockPanel.Dock="Left">Map Zoom</Label>
                    <Slider Name="zoomSlider" Minimum="0.01" Maximum="2" Value="1" />
                </DockPanel>
                <ScrollViewer HorizontalScrollBarVisibility="Auto">
                    <ContentControl Content="{StaticResource markerPointCanvas}" />
                </ScrollViewer>
            </DockPanel>
        </DataTemplate>

        <!-- ======== Set Camera Unit Target ======== -->

        <DataTemplate x:Key="SetCameraUnitTargetAction">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <DockPanel>
                    <Label DockPanel.Dock="Left">Group:</Label>
                    <ComboBox ItemsSource="{Binding Mission.AllGroups, ElementName=window}" MaxHeight="200" SelectedItem="{Binding Group}" />
                </DockPanel>
                <GroupBox Header="Help">
                    <TextBlock TextWrapping="WrapWithOverflow">
                    This action points the camera at the first unit found that is marked with the selected group.
                    <LineBreak />
                    You can add units to groups by editing the groups column of the unit list in the Create Units display, or by right-clicking on unit icons.
                    <LineBreak />
                    Separate multiple groups with commas and no spaces.
                    </TextBlock>
                </GroupBox>
            </StackPanel>
        </DataTemplate>

        <!-- ======== SetCameraPosDirAction Template ======== -->

        <DataTemplate x:Key="SetCameraPosDirAction">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Label Grid.Column="0" Grid.Row="0">Position (x)</Label>
                <Label Grid.Column="0" Grid.Row="1">Position (y)</Label>
                <Label Grid.Column="0" Grid.Row="2">Position (z)</Label>
                <Label Grid.Column="0" Grid.Row="3">Rotation (x)</Label>
                <Label Grid.Column="0" Grid.Row="4">Rotation (y)</Label>
                <Label Grid.Column="0" Grid.Row="5">Cam time (seconds)</Label>
                <TextBox Grid.Column="1" Grid.Row="0" Text="{Binding PX, UpdateSourceTrigger=PropertyChanged}" />
                <TextBox Grid.Column="1" Grid.Row="1" Text="{Binding PY, UpdateSourceTrigger=PropertyChanged}" />
                <TextBox Grid.Column="1" Grid.Row="2" Text="{Binding PZ, UpdateSourceTrigger=PropertyChanged}" />
                <TextBox Grid.Column="1" Grid.Row="3" Text="{Binding RX, UpdateSourceTrigger=PropertyChanged}" />
                <TextBox Grid.Column="1" Grid.Row="4" Text="{Binding RY, UpdateSourceTrigger=PropertyChanged}" />
                <TextBox Grid.Column="1" Grid.Row="5" Text="{Binding Time, UpdateSourceTrigger=PropertyChanged}" />
                <TextBlock TextWrapping="WrapWithOverflow" Grid.Row="6" Grid.ColumnSpan="2">
                    This action sets the position and rotation of the camera. Fields left blank will be unchanged.
                </TextBlock>
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="BeautyShotAction">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <DockPanel>
                    <Label DockPanel.Dock="Left">Group:</Label>
                    <ComboBox ItemsSource="{Binding Mission.AllGroups, ElementName=window}" MaxHeight="200" SelectedItem="{Binding Group}" />
                </DockPanel>
                <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Label Grid.Column="0" Grid.Row="0">Min heading</Label>
                    <Label Grid.Column="0" Grid.Row="1">Max heading</Label>
                    <Label Grid.Column="0" Grid.Row="2">Min pitch</Label>
                    <Label Grid.Column="0" Grid.Row="3">Max pitch</Label>
                    <Label Grid.Column="0" Grid.Row="4">Max camera Y-axis offset (°)</Label>
                    <Label Grid.Column="0" Grid.Row="5">Cam time (seconds)</Label>
                    <TextBox Grid.Column="1" Grid.Row="0" Text="{Binding MinHeading, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Column="1" Grid.Row="1" Text="{Binding MaxHeading, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Column="1" Grid.Row="2" Text="{Binding MinPitch, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Column="1" Grid.Row="3" Text="{Binding MaxPitch, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Column="1" Grid.Row="4" Text="{Binding MaxCamOffset, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Column="1" Grid.Row="5" Text="{Binding Time, UpdateSourceTrigger=PropertyChanged}" />
                </Grid>
                <GroupBox Header="Help">
                    <TextBlock TextWrapping="WrapWithOverflow">
                    This action takes a beauty shot of the first unit found that is marked with the selected group.
                    <LineBreak />
                    You can add units to groups by editing the groups column of the unit list in the Create Units display, or by right-clicking on unit icons.
                    <LineBreak />
                    Separate multiple groups with commas and no spaces.
                    </TextBlock>
                </GroupBox>
            </StackPanel>
        </DataTemplate>        
        
        <!-- ======== Other camera action Templates ======== -->

        <DataTemplate x:Key="SaveCameraStateAction">
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
                Saves the current camera state.
            </TextBlock>
        </DataTemplate>

        <DataTemplate x:Key="RestoreCameraStateAction">
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
                Restores the saved camera state.
            </TextBlock>
        </DataTemplate>

        <DataTemplate x:Key="ShakeCameraAction">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Label Grid.Column="0">Strength</Label>
                <TextBox Grid.Column="1" Text="{Binding Strength, UpdateSourceTrigger=PropertyChanged}" />
            </Grid>
        </DataTemplate>

        <!-- ======== Cutscene templates ======== -->

        <DataTemplate x:Key="EnterCutsceneAction">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Label>ID</Label>
                    <TextBox Grid.Column="1" Text="{Binding ID, UpdateSourceTrigger=PropertyChanged}" />
                    <CheckBox Grid.Row="1" Grid.ColumnSpan="2" IsChecked="{Binding Instant}">Instant</CheckBox>
                    <CheckBox Grid.Row="2" Grid.ColumnSpan="2" IsChecked="{Binding Skippable}">Skippable</CheckBox>
                </Grid>
                <GroupBox Header="Help" VerticalAlignment="Center" HorizontalAlignment="Center">
                    <TextBlock TextWrapping="WrapWithOverflow">
                        This action will start a cutscene. The GUI is hidden and the player's controls are disabled.
                        <LineBreak/>
                        ID is only needed if the cutscene is to be skippable.
                    </TextBlock>
                </GroupBox>
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:Key="LeaveCutsceneAction">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <CheckBox IsChecked="{Binding Instant}">Instant</CheckBox>
                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center"> This action will leave the current cutscene, if any.</TextBlock>
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:Key="CutsceneSkippedCondition">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <ComboBox ItemsSource="{Binding Mission.Cutscenes, ElementName=window}" SelectedItem="{Binding CutsceneID}" />
                <Label>This condition triggers when the "skip cutscene" command is sent while the selected cutscene is active.</Label>
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:Key="StopCutsceneActionsAction">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <ComboBox ItemsSource="{Binding Mission.Cutscenes, ElementName=window}" SelectedItem="{Binding CutsceneID}" />
                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center"> 
                    This action stops all actions contained within a single trigger, between the specified Enter Cutscene action and (if present) the Leave Cutscene action.
                </TextBlock>
            </StackPanel>
        </DataTemplate>
        
        <DataTemplate x:Key="FadeOutAction">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <CheckBox IsChecked="{Binding Instant}">Instant</CheckBox>
                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center"> This action will cause the screen to fade to black. Controls are unaffected.</TextBlock>
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:Key="FadeInAction">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <CheckBox IsChecked="{Binding Instant}">Instant</CheckBox>
                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center"> This action will cause the screen to fade in from black.</TextBlock>
            </StackPanel>
        </DataTemplate>

        <!-- ======== Unit Entered Area Template ======== -->

        <!--todo: TextSearch.TextPath="@Name"-->

        <DataTemplate x:Key="UnitsAreInAreaCondition">
            <local:UnitEnteredAreaControl />
        </DataTemplate>

        <!-- ======== Objective templates ======== -->
        
        <DataTemplate x:Key="AddUnitsToObjectiveAction">
            <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Label Grid.Column="0" Grid.Row="0">Objective ID</Label>
                <ComboBox Grid.Row="0" Grid.Column="1" ItemsSource="{Binding Mission.Objectives, ElementName=window}" SelectedItem="{Binding ID}" />
                <Label Grid.Row="1" Grid.Column="0">Unit group</Label>
                <ComboBox Grid.Row="1" Grid.Column="1" ItemsSource="{Binding Mission.AllGroups, ElementName=window}" SelectedItem="{Binding Group}" />
                <TextBlock Grid.Row="2" Grid.ColumnSpan="2">This adds all units in the selected group to the objective.<LineBreak />
                A unit must be within radar or LOS range for the objectives widget to find it.
                </TextBlock>
            </Grid>
        </DataTemplate>
        
        <DataTemplate x:Key="AddPointToObjectiveAction">
            <DockPanel>
                <ToolBarTray DockPanel.Dock="Top">
                    <ToolBar>
                        <Label>Objective ID:</Label>
                        <ComboBox ItemsSource="{Binding Mission.Objectives, ElementName=window}" SelectedItem="{Binding ID}" />
                    </ToolBar>
                </ToolBarTray>
                <DockPanel DockPanel.Dock="Bottom" Background="White">
                    <Label DockPanel.Dock="Left">Map Zoom</Label>
                    <Slider Name="zoomSlider" Minimum="0.01" Maximum="2" Value="1" />
                </DockPanel>
                <ScrollViewer HorizontalScrollBarVisibility="Auto">
                    <ContentControl Content="{StaticResource markerPointCanvas}" />
                </ScrollViewer>
            </DockPanel>
        </DataTemplate>

    </UserControl.Resources>
</UserControl>
