to fix/add:

antispam - 'antispam':{'enabled':True, 'quiet':False, 'agressiveness':1, 'bonuslength':100, 'duration':900}
channel configuration (antispam) - copy from chanserv to sayhooks

update chanserv to check if user is in database before performing actions

after release:
new protocol with "newprotocol" in lobby name/version - poll lobby developers for alternatives
quietness? (whether to print sayhooks actions)

thoughts:

outgoing protocol class too - useful for abstracting protocol version differences.

ability to pull updates from trusted servers

default user state for channels :D << allows "moderated" channels
logging in when banned throws you hidden into a #banned channel

multiple protocol support
track disconnected clients since the last command they sent - resend all data from that point.
ability to host multiple battles simultaneously if you have a bot tag
move battle ingame notification from host's ingame status to an updatebattleinfo param

insane amounts of stats - maybe through a separate sql db and a bot

separate in-battle map sync and map download percentage
make a unit test for sql, run it through sqlite


more concise protocol validation:

concept from FORCEJOINBATTLE

validation = (
	(target_battle in self._root.battles, 'Target battle does not exist.'),
	(client.username != battle.host, 'You are not allowed to force this user into battle.'),
	(not user.compat_matchmaking, 'This user does not subscribe to matchmaking.'),
	(battle.passworded and not password == battle.password, 'Incorrect password for target battle.')
)
if not self.validate(validation): return

also decorator selectors to automatically coerce types and gather data:

@s('online_user', 'battle')
def in_FORCEJOINBATTLE(self, client, user, target_battle)
