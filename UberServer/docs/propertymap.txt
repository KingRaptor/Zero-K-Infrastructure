== Overview ==
The current spring lobby protocol suffers from several shortcomings like using bitfields for battlesettings and limited extensibility

To address these shortcomings, general property support will be added, that allow user, server and bots to set or read data bound to objects.

The objects include users, server, battles and chat channel.

== Non-Goals == 
These properties should not be arbitrary, every property that is used has to be registered on the server
To unify the interface all values are passed as strings and clients have to decode them to interpret them correctly
The properties are not persistent, so they are lost as soon as the object gets deleted (user leaves, battle is closed)

== Protocol Commands ==
tab separated and newline terminated
if free form text is used in a property, encode it to keep those characters out (base64?)

clients can expect a VALUE command from the server after each SET or GET
the server may send VALUE commands when information changes to update clients 
(for example update all people in a battleroom when something changes)

You may set or get more than one property of an object in one command. 
The namespace and object name must not be specified for all properties.
To set/get properties of multiple objects you need multiple SET/GET commands

Clients may tell the server that they want to LISTEN to changes in a property, the server will send VALUE commands if the property changes. 
The server will forget the listeners if a object is destroyed and later recreated (user leaves server and reconnects).

client -> server:
GET <namespace>:<objectid> <property name> {<property name>}
SET <namespace>:<objectid> <property name>=<value> {<property name>=<value>}
LISTEN <namespace>:<objectid> <property name> {<property name>}
UNLISTEN <namespace>:<objectid> <property name> {<property name>}

server -> client:
VALUE <namespace>:<objectid> <property name>=<value> {<property name>=<value>}


== Properties ==

each property has it's own handler, which controls what information is stored and how information is presented. 
The handler takes care of data validation and access control and storage of the value.

each handler needs:
  * the object that holds the property
  * the object that wants to set or read the property
  * the value that is going to be set (optional)

the handler returns the a string that gets passed to the client
if there is no data to display (because it wasn't set or insufficient access rights) the handler should return an empty string

== Example Communication ==
<: from server to client
>: from client to server


> JOINBATTLE 50
< JOINBATTLE 50 $hashcode
< VALUE battle:50 player=joe,john,jack
< VALUE battle:50.player.joe ready=1 team=1 ally=1 sync=1 side=0 teamcolor=#0000ff
< VALUE battle:50.player.john ready=1 team=2 ally=2 sync=1 side=1 teamcolor=#00ff00
< VALUE battle:50.player.jack ready=1 team=3 ally=3 sync=1 side=0 teamcolor=#ff0000



when jack leaves the battle:
< VALUE battle:50 players=joe,john

== Possible Uses ==

 * ELO in the user object
 * clan tags per user
 * away and status messages per user
 * map/modlink in the battle
 * per battle banlists


== Documentation of Properties ==
All properties implemented on the server should be documented, along with examples how to use them. 

