#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.19462
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZeroKWeb.AppCode
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ModStats")]
	public partial class ModStatsDb : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDamage(Damage instance);
    partial void UpdateDamage(Damage instance);
    partial void DeleteDamage(Damage instance);
    partial void InsertUnit(Unit instance);
    partial void UpdateUnit(Unit instance);
    partial void DeleteUnit(Unit instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    #endregion
		
		public ModStatsDb() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ModStatsConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ModStatsDb(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModStatsDb(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModStatsDb(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModStatsDb(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Damage> Damages
		{
			get
			{
				return this.GetTable<Damage>();
			}
		}
		
		public System.Data.Linq.Table<Unit> Units
		{
			get
			{
				return this.GetTable<Unit>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Damage")]
	public partial class Damage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GameID;
		
		private string _AttackerUnit;
		
		private string _VictimUnit;
		
		private double _Damage1;
		
		private double _Paralyze;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnAttackerUnitChanging(string value);
    partial void OnAttackerUnitChanged();
    partial void OnVictimUnitChanging(string value);
    partial void OnVictimUnitChanged();
    partial void OnDamage1Changing(double value);
    partial void OnDamage1Changed();
    partial void OnParalyzeChanging(double value);
    partial void OnParalyzeChanged();
    #endregion
		
		public Damage()
		{
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttackerUnit", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AttackerUnit
		{
			get
			{
				return this._AttackerUnit;
			}
			set
			{
				if ((this._AttackerUnit != value))
				{
					this.OnAttackerUnitChanging(value);
					this.SendPropertyChanging();
					this._AttackerUnit = value;
					this.SendPropertyChanged("AttackerUnit");
					this.OnAttackerUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimUnit", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VictimUnit
		{
			get
			{
				return this._VictimUnit;
			}
			set
			{
				if ((this._VictimUnit != value))
				{
					this.OnVictimUnitChanging(value);
					this.SendPropertyChanging();
					this._VictimUnit = value;
					this.SendPropertyChanged("VictimUnit");
					this.OnVictimUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Damage", Storage="_Damage1", DbType="Float NOT NULL")]
		public double Damage1
		{
			get
			{
				return this._Damage1;
			}
			set
			{
				if ((this._Damage1 != value))
				{
					this.OnDamage1Changing(value);
					this.SendPropertyChanging();
					this._Damage1 = value;
					this.SendPropertyChanged("Damage1");
					this.OnDamage1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paralyze", DbType="Float NOT NULL")]
		public double Paralyze
		{
			get
			{
				return this._Paralyze;
			}
			set
			{
				if ((this._Paralyze != value))
				{
					this.OnParalyzeChanging(value);
					this.SendPropertyChanging();
					this._Paralyze = value;
					this.SendPropertyChanged("Paralyze");
					this.OnParalyzeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Damage", Storage="_Game", ThisKey="GameID", OtherKey="GameID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Damages.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Damages.Add(this);
						this._GameID = value.GameID;
					}
					else
					{
						this._GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Unit")]
	public partial class Unit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GameID;
		
		private string _Unit1;
		
		private int _Created;
		
		private int _Destroyed;
		
		private int _Cost;
		
		private int _Health;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnUnit1Changing(string value);
    partial void OnUnit1Changed();
    partial void OnCreatedChanging(int value);
    partial void OnCreatedChanged();
    partial void OnDestroyedChanging(int value);
    partial void OnDestroyedChanged();
    partial void OnCostChanging(int value);
    partial void OnCostChanged();
    partial void OnHealthChanging(int value);
    partial void OnHealthChanged();
    #endregion
		
		public Unit()
		{
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Unit", Storage="_Unit1", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Unit1
		{
			get
			{
				return this._Unit1;
			}
			set
			{
				if ((this._Unit1 != value))
				{
					this.OnUnit1Changing(value);
					this.SendPropertyChanging();
					this._Unit1 = value;
					this.SendPropertyChanged("Unit1");
					this.OnUnit1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="Int NOT NULL")]
		public int Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Destroyed", DbType="Int NOT NULL")]
		public int Destroyed
		{
			get
			{
				return this._Destroyed;
			}
			set
			{
				if ((this._Destroyed != value))
				{
					this.OnDestroyedChanging(value);
					this.SendPropertyChanging();
					this._Destroyed = value;
					this.SendPropertyChanged("Destroyed");
					this.OnDestroyedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Int NOT NULL")]
		public int Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Health", DbType="Int NOT NULL")]
		public int Health
		{
			get
			{
				return this._Health;
			}
			set
			{
				if ((this._Health != value))
				{
					this.OnHealthChanging(value);
					this.SendPropertyChanging();
					this._Health = value;
					this.SendPropertyChanged("Health");
					this.OnHealthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Unit", Storage="_Game", ThisKey="GameID", OtherKey="GameID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Units.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Units.Add(this);
						this._GameID = value.GameID;
					}
					else
					{
						this._GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GameID;
		
		private string _SpringGameIDString;
		
		private string _Mod;
		
		private int _Players;
		
		private int _Teams;
		
		private System.DateTime _Created;
		
		private string _IP;
		
		private double _Version;
		
		private string _Map;
		
		private string _PlayerList;
		
		private EntitySet<Damage> _Damages;
		
		private EntitySet<Unit> _Units;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnSpringGameIDStringChanging(string value);
    partial void OnSpringGameIDStringChanged();
    partial void OnModChanging(string value);
    partial void OnModChanged();
    partial void OnPlayersChanging(int value);
    partial void OnPlayersChanged();
    partial void OnTeamsChanging(int value);
    partial void OnTeamsChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnVersionChanging(double value);
    partial void OnVersionChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnPlayerListChanging(string value);
    partial void OnPlayerListChanged();
    #endregion
		
		public Game()
		{
			this._Damages = new EntitySet<Damage>(new Action<Damage>(this.attach_Damages), new Action<Damage>(this.detach_Damages));
			this._Units = new EntitySet<Unit>(new Action<Unit>(this.attach_Units), new Action<Unit>(this.detach_Units));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpringGameIDString", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SpringGameIDString
		{
			get
			{
				return this._SpringGameIDString;
			}
			set
			{
				if ((this._SpringGameIDString != value))
				{
					this.OnSpringGameIDStringChanging(value);
					this.SendPropertyChanging();
					this._SpringGameIDString = value;
					this.SendPropertyChanged("SpringGameIDString");
					this.OnSpringGameIDStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mod", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Mod
		{
			get
			{
				return this._Mod;
			}
			set
			{
				if ((this._Mod != value))
				{
					this.OnModChanging(value);
					this.SendPropertyChanging();
					this._Mod = value;
					this.SendPropertyChanged("Mod");
					this.OnModChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Players", DbType="Int NOT NULL")]
		public int Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				if ((this._Players != value))
				{
					this.OnPlayersChanging(value);
					this.SendPropertyChanging();
					this._Players = value;
					this.SendPropertyChanged("Players");
					this.OnPlayersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Teams", DbType="Int NOT NULL")]
		public int Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				if ((this._Teams != value))
				{
					this.OnTeamsChanging(value);
					this.SendPropertyChanging();
					this._Teams = value;
					this.SendPropertyChanged("Teams");
					this.OnTeamsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Float NOT NULL")]
		public double Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="VarChar(100)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerList", DbType="VarChar(2000)")]
		public string PlayerList
		{
			get
			{
				return this._PlayerList;
			}
			set
			{
				if ((this._PlayerList != value))
				{
					this.OnPlayerListChanging(value);
					this.SendPropertyChanging();
					this._PlayerList = value;
					this.SendPropertyChanged("PlayerList");
					this.OnPlayerListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Damage", Storage="_Damages", ThisKey="GameID", OtherKey="GameID")]
		public EntitySet<Damage> Damages
		{
			get
			{
				return this._Damages;
			}
			set
			{
				this._Damages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Unit", Storage="_Units", ThisKey="GameID", OtherKey="GameID")]
		public EntitySet<Unit> Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				this._Units.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Damages(Damage entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Damages(Damage entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_Units(Unit entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Units(Unit entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
}
#pragma warning restore 1591
