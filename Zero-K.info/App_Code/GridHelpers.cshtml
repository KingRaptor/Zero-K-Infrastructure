@using System.Web.Mvc
@using System.Web.Mvc.Html
@using ZeroKWeb

@helper GridJs(IUniGrid grid)
{
    <script type="text/javascript">
        gridData = typeof (gridData) == 'undefined' ? {}: gridData; // declare griddate if it does not already exist

        gridData['@grid.ID'] = {};

        // fill up griddata with values
        @foreach (var sel in grid.SelectedKeys) {
            @: gridData['@grid.ID'][@sel] = '1';
        }


        $(document).ready(function () {
            $("#@(grid.ID)_pager_prefix").each(function(i,prefix) {
                $(prefix).prependTo($(".@(grid.ID)_pager"));
            });

            $("#@(grid.ID)_pager_suffix").each(function(i,suffix) {
                $(suffix).appendTo($(".@(grid.ID)_pager"));
            });

            $(".js-grid-first").button(
                {
                    icons: {
                        primary: "ui-icon-seek-first"
                    }
                });

            $(".js-grid-prev").button(
                {
                    icons: {
                        primary: "ui-icon-seek-prev"
                    }
                });
            $(".js-grid-next").button(
                {
                    icons: {
                        primary: "ui-icon-seek-next"
                    }
                });

            $(".js-grid-end").button(
                {
                    icons: {
                        primary: "ui-icon-seek-end"
                    }
                });

            $(".js-disabled").button("disable");

            $(".js-grid-selector").each(function() {
                if ($(this).is(':checked')) {
                    $(this).closest('tr').addClass('row_selected');
                }
            });

            // copy griddata to hidden fields for submission
            gridFormHookSelections('@grid.ID', getGridForm('@grid.ID'));
        });


        function getGridForm(gridID) {
            return $("#" + gridID + "page").closest('form');
        }

        function gridSetPage(gridID, page) {
            var pageNumberElem = $("#" + gridID + "page");
            pageNumberElem.val(page);
            var form = getGridForm(gridID);
            form.find('input').unbind();
            form.submit();
        }

        function gridSetSort(gridID, colName) {
            var oc = $('#' + gridID + 'order');
            var od = $('#' + gridID + 'desc');
            if (oc.val() == colName) {
                od.val(od.val() == 'True' ? 'False' : 'True');
            }
            else {
                od.val('False');
            }
            oc.val(colName);

            var form = getGridForm(gridID);
            form.find('input').unbind();
            form.submit();
        }

        function gridSelect(gridID, elem) {
            var checked = elem.is(':checked');
            var value = elem.val();
            gridData[gridID][value] = checked ? '1' : '0';
            var row = elem.closest('tr');
            if (checked) row.addClass('row_selected');
            else row.removeClass('row_selected');
        }

        function gridGetCsv(gridID) {
            var form = getGridForm(gridID);
            var url = form.attr("action") +"?" + form.serialize()+ "&" + gridID + "csv=True";
            window.location = url;
        }

        function gridToggleRows(gridID,el) {
            var form = getGridForm(gridID);
            var checked = el.is(':checked');
            form.find('.js-grid-selector').each(function() {
                if (checked) $(this).attr('checked', 'checked');
                else $(this).removeAttr('checked');
                gridSelect(gridID, $(this));
            });
        }

        function gridFormHookSelections(gridID, form, name) {
            if (name == null) name = gridID + "sel";

            form.submit(function () {
                jQuery.each(gridData[gridID], function(key, val) {
                    if (val == '1') {
                        $("<input>").attr({
                            'type': 'hidden',
                            'name': name,
                            'value' : key
                        }).appendTo(form);
                    }
                });
            });
        }

    </script>
}
@helper Hidden(System.Web.Mvc.HtmlHelper Html, IUniGrid grid)
{
    @Html.Hidden(grid.ID + "order", grid.OrderColumn)
    @Html.Hidden(grid.ID + "desc", grid.OrderIsDescending)
    @Html.Hidden(grid.ID + "page", grid.PageNumber)
}
@helper Column(IUniGrid grid, IUniGridCol col)
{
if (col.IsSelector)
{
   <input type="checkbox" onclick="gridToggleRows('@grid.ID',$(this))" />
}
    <a href="#" onclick="gridSetSort('@grid.ID','@col.ID');return false;">
        @col.Description
        @if (!string.IsNullOrEmpty(grid.OrderColumn) && col.ID == grid.OrderColumn)
    {
        if (grid.OrderIsDescending)
        {
                <img class="icon16" src="~/img/sort_up_green.png" />
            }
            else
            {
                <img class="icon16" src="~/img/sort_down_green.png" />
            }
        }
    </a>
}
@helper Pager(System.Web.Mvc.HtmlHelper Html, IUniGrid grid)
{
    <div class='@(grid.ID)_pager grid_pager'>
        @if (grid.PageCount > 1)
        {
            <a href="#" class="js-grid-first @(grid.PageNumber <= 1 ? "js-disabled" : "")" onclick="gridSetPage('@grid.ID', 1);return false;" style="height: 20px"></a>
            <a href="#" class="js-grid-prev @(grid.PageNumber <= 1 ? "js-disabled" : "")" onclick="gridSetPage('@grid.ID', @(grid.PageNumber - 1));return false;" style="height: 20px"></a>
            <span>
                Page
                <input type="text" onblur="return gridSetPage('@grid.ID', $(this).val())" style="width: 40px" value="@grid.PageNumber" />
                of @grid.PageCount (@grid.RecordCount records)
            </span>
            <a href="#" class="js-grid-next @(grid.PageNumber >= grid.PageCount ? "js-disabled" : "")" onclick="gridSetPage('@grid.ID', @(grid.PageNumber + 1));return false;" style="height: 20px"></a>
            <a href="#" class="js-grid-end @(grid.PageNumber >= grid.PageCount ? "js-disabled" : "")" onclick="gridSetPage('@grid.ID', @grid.PageCount);return false;" style="height: 20px"></a>

            if (grid.AllowCsvExport)
             {
                 <span>&nbsp;&nbsp;&nbsp;<a href="#" onclick="gridGetCsv('@grid.ID');return false;" nicetitle="Download as excel - CSV"><img src="~/Img/excel.png" style="height: 25px; border: 0;" /></a></span>
             }
        }
    </div>
}
@helper TableHeader(IUniGrid grid)
{
    <tr>
        @foreach (var col in grid.BaseCols.Where(x => x.AllowWeb))
        {
            <th style="width:@col.Width;">
                @Column(grid, col)
            </th>
        }
    </tr>
}
@helper TableData(IUniGrid grid)
{
    @grid.RenderTableRows()
}

@helper RenderTable(System.Web.Mvc.HtmlHelper html, IUniGrid grid, string cssClass = null)
{
    grid.PrepareRenderData();
    if (grid.AllowCsvExport && grid.CsvRequested)
    {
        grid.RenderCsv();
    }
    else
    {
        <div class="@(cssClass ?? "grid")" id="@grid.ID">
            <div class="grid_title">@grid.Title</div>
            @GridJs(grid)
            @Pager(html, grid)
            @Hidden(html, grid)

            <table class="grid_table">
                @if (grid.RenderHeaders)
                {
                    <thead>
                        @TableHeader(grid)
                    </thead>
                }
                <tbody>
                    @TableData(grid)
                </tbody>
            </table>
            @Pager(html, grid)
        </div>
    }
}
