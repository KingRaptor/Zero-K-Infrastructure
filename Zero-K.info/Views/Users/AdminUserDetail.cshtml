@using ZeroKWeb
@using ZkData
@model ZkData.Account

@{
    Page.Title = Model.Name + " user administration";
}           

<div class="admin">
    <h1>Administer @Html.PrintAccount(@Model)</h1>
    AccountID: @Model.AccountID
    <br />
    LobbyID: @Model.LobbyID
    <br />
    Lobby program: @Model.LobbyVersion  (checked @Model.LastLobbyVersionCheck)<br/>
    IP:
    <table>
        <thead>
            <tr>
                <th>IP</th>
                <th>Count</th>
                <th>First</th>
                <th>Last</th>
            </tr>
        </thead>
        <tbody>
            @foreach (AccountIP x in Model.AccountIPS.OrderByDescending(x => x.LastLogin))
            {
                <tr>
                    <td>@x.IP</td>
                    <td>@x.LoginCount</td>
                    <td>@x.FirstLogin</td>
                    <td>@x.LastLogin</td>
                </tr>
            }
        </tbody>
    </table>
    <br />
    UserID:
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Count</th>
                <th>First</th>
                <th>Last</th>
            </tr>
        </thead>
        <tbody>
            @foreach (AccountUserID x in Model.AccountUserIDS.OrderByDescending(x => x.LastLogin))
            {
                <tr>
                    <td>@x.UserID</td>
                    <td>@x.LoginCount</td>
                    <td>@x.FirstLogin</td>
                    <td>@x.LastLogin</td>
                </tr>
            }
        </tbody>
    </table>
    <br />
    
    @{
        var myIPs = Model.AccountIPS.Select(x => x.IP).ToList();
        var myIDs = Model.AccountUserIDS.Select(x => x.UserID).ToList();
        var brokenIDs = new List<Int64>() { 1236934115, 1199297835, -2130083051, 195445522, 1141552226 };
        var smurfs = new ZkDataContext().Accounts.Where(x => x.AccountID != Model.AccountID && (x.AccountIPS.Any(y => myIPs.Contains(y.IP)) || x.AccountUserIDS.Where(id => !brokenIDs.Contains(id.UserID)).Any(y => myIDs.Contains(y.UserID))));
        
        Int64? lastUserID = null;
        if (Model.AccountUserIDS.Any()) {
            lastUserID = Model.AccountUserIDS.OrderByDescending(x => x.LastLogin).FirstOrDefault().UserID;
        }
    }
    <h2>Smurfs</h2>
    @foreach (var ac in smurfs)
    {
        <span>@Html.PrintAccount(ac)  -  @Html.ActionLink("admin", "AdminUserDetail", new{id=ac.AccountID})</span><br />
    }
    
    <h2>Abuse reports</h2>
    <table>
    @foreach (var a in Model.AbuseReportsByAccountID)
    {
        <tr><td>@a.Time</td><td>@Html.PrintAccount(a.AccountByReporterAccountID)</td><td>@Html.BBCode(a.Text)</td></tr>
    }
    </table>
    
    @if (Model.PunishmentsByAccountID.Any())
    {
        <h2>Old penalties</h2>
        foreach (Punishment p in Model.PunishmentsByAccountID.Where(x => x.IsExpired))
        {
            @Html.DisplayFor(x => p)
        }
    }


    <h2>Modify user settings</h2>
    <form method="post" action="@Url.Action("ChangeLobbyID", "Users", new { accountID = Model.AccountID })">
        Change lobby ID: @Html.TextBox("newLobbyID")
        <input type="submit" />
    </form>
    Hide country flag: <form method="post" action="@Url.Action("ChangeHideCountry", "Users", new { accountID = Model.AccountID })">@Html.CheckBox("hideCountry")<input type="submit"/></form>
    <br />
    <h2>Modify user permissions</h2>
    <form method="post" action="@Url.Action("ChangePermissions", "Users", new { accountID = Model.AccountID, adminAccountID = Global.AccountID })">
        Springie level: @Html.TextBox("springieLevel", Model.SpringieLevel)
        Zero K admin: @Html.CheckBox("zkAdmin", Model.IsZeroKAdmin)
        VPN exception: @Html.CheckBox("vpnException", Model.HasVpnException)
        <input type="submit" />
    </form>


    <h2>Issue a penalty</h2>
    <form action="@Url.Action("Punish", "Users", new { accountID = Model.AccountID })" method="post">
        Reason: @Html.TextBox("reason","Smurf")<br />
        <br />

        Delete XP: @Html.CheckBox("deleteXP")<br />
        Delete influence: @Html.CheckBox("deleteInfluence")<br />
        <br />
        Mute: @Html.CheckBox("banMute")<br />
        Block commanders: @Html.CheckBox("banCommanders")<br />
        Block unlocks: @Html.CheckBox("banUnlocks")<br />
        <br />
        IP: @Html.TextBox("banIP", Model.AccountIPS.OrderByDescending(x=>x.LastLogin).Select(x=>x.IP).FirstOrDefault())<br />
        UserID: @Html.TextBox("banUserID", lastUserID != null && !brokenIDs.Contains((int)lastUserID) ? lastUserID.ToString() : "")<br />
        Ban site: @Html.CheckBox("banSite")<br />
        Ban lobby: @Html.CheckBox("banLobby")<br />
        Ban forum: @Html.CheckBox("banForum")<br />
        Set rights to zero: @Html.CheckBox("setRightsToZero")<br />
        Ban hours: @Html.TextBox("banHours",1)<br />

        <input type="submit" value="BAN" class="delete" />

    </form>
</div>
